# Simple Design System (SDS) - Cursor Rules

You are working with the Simple Design System (SDS), a comprehensive React-based design system with Figma integration. Follow these rules to maintain consistency and quality.

## Core Principles

### 1. Always Use Figma MCP Tools
- **MANDATORY**: Use Figma MCP tools when implementing any design
- Use `#get_image` for high-level design understanding
- Use `#get_code` for specific UI element information  
- Use `get_code_connect_map` and `get_variable_map` for existing patterns
- If patterns don't exist in the codebase, ask for permission before creating new components

### 2. Component Usage Rules
- **ONLY use existing SDS components** - never create new components without explicit permission
- **Never import from external libraries** like `@react-aria`, `@react-stately` directly
- **Always use SDS import aliases**:
  ```tsx
  import { Button, Text } from "primitives";
  import { Header, Footer } from "compositions";
  import { Flex, Section } from "layout";
  import { useAuth, usePricing } from "data";
  import { useMediaQuery } from "hooks";
  import { IconChevronLeft } from "icons";
  ```

### 3. Design Token Requirements
- **NEVER hardcode values** - always use CSS custom properties
- Use `var(--sds-color-*)` for colors
- Use `var(--sds-size-space-*)` for spacing
- Use `var(--sds-typography-*)` for typography
- Use `var(--sds-size-radius-*)` for border radius
- Use `var(--sds-effects-shadows-*)` for shadows

### 4. Layout Rules
- **Never write custom CSS** for positioning
- **Always use layout components**: `<Flex>`, `<Section>`, `<Grid>`
- **Never use CSS Grid/Flexbox directly** - use SDS layout components
- Example: `<Flex direction="row" gap="400" type="third">` instead of custom CSS

### 5. Responsive Design
- **Always use `useMediaQuery` hook** for responsive behavior
- **Mobile-first approach** - design for mobile, then enhance for desktop
- Use conditional rendering based on screen size:
  ```tsx
  const { isMobile } = useMediaQuery();
  return (
    <Flex direction={isMobile ? "column" : "row"} gap={isMobile ? "600" : "1200"}>
  );
  ```

## File Structure Rules

### Component Organization
- **Primitives**: `src/ui/primitives/` - atomic components
- **Compositions**: `src/ui/compositions/` - complex components  
- **Layout**: `src/ui/layout/` - structural components
- **Examples**: `src/examples/` - complete implementations
- **Stories**: `src/stories/` - Storybook documentation

### New Component Creation (Rare)
When creating new components (requires permission):
1. Create in appropriate category: `src/ui/primitives/ComponentName/ComponentName.tsx`
2. Add to index: `src/ui/primitives/index.ts`
3. Create stories: `src/stories/primitives/ComponentName.stories.tsx`
4. Create Figma Code Connect: `src/figma/primitives/ComponentName.figma.tsx`
5. Update `figma.config.json`

### Implementation Files
- **Complete screens/pages**: `src/examples/DesignName.tsx`
- **Stories**: `src/stories/examples/DesignName.stories.tsx`
- **Types**: Add to `src/data/types/` if needed
- **Mock data**: Include in example files

## Code Quality Standards

### TypeScript
- **Strict typing required** - no `any` types
- **Define proper interfaces** for all props and data structures
- **Use existing SDS types** when available

### Accessibility
- **Semantic HTML required** - use proper elements
- **ARIA attributes** for complex interactions
- **Keyboard navigation** support
- **Focus management** for modals and overlays

### Testing & Documentation
- **Comprehensive Storybook stories** with all variants
- **Real-world data** - no Lorem ipsum (mark placeholders with TODO)
- **JSDoc comments** for complex logic
- **Error handling** and loading states

## Implementation Workflows

### Design-to-Code Process
1. **Analyze Figma design** using MCP tools
2. **Map to existing SDS components** - check `codeDependencies`
3. **Read component APIs** in TypeScript files
4. **Use semantic imports** with aliases
5. **Apply design tokens** for all styling
6. **Implement responsive behavior**
7. **Add accessibility features**
8. **Create comprehensive stories**

### Component Composition Patterns
```tsx
// Good: Using SDS components with proper composition
function ProductPage() {
  const { isMobile } = useMediaQuery();
  
  return (
    <div>
      <Header variant="marketing" />
      <Section padding={isMobile ? "800" : "1600"}>
        <Flex direction="column" gap="1200" alignPrimary="center">
          <Flex direction="column" gap="600" alignPrimary="center">
            <TextHeading size="large">Product Title</TextHeading>
            <Text variant="large">Description</Text>
            <Button variant="primary" size="large">Get Started</Button>
          </Flex>
        </Flex>
      </Section>
    </div>
  );
}
```

### Data Integration
- **Use SDS data providers**: `useAuth`, `usePricing`, `useProducts`
- **Wrap apps with providers**: `<AllProviders>` or specific providers
- **Handle loading and error states** properly

## Common Pitfalls to Avoid

### ❌ Never Do
```tsx
// Hardcoded values
<div style={{ color: "#111", padding: "16px" }}>

// Custom layout CSS  
<div className="grid grid-cols-3 gap-4">

// Wrong imports
import { Button } from "@react-aria/button";

// Non-existent props
<Button active={true}>
```

### ✅ Always Do
```tsx
// Use CSS variables via classes
<div className="custom-element">
// .custom-element { color: var(--sds-color-text-default-default); }

// Use layout components
<Flex direction="row" gap="400" type="third">

// Use SDS imports
import { Button } from "primitives";

// Check actual component props
<Button variant="primary" isSelected>
```

## Figma Annotations

Pay attention to annotation attributes in Figma MCP responses:
```jsx
<div
  data-content-annotations="Dynamic button text based on state"
  data-interaction-annotations="Buttons disabled for current plan"
/>
```

These provide crucial implementation context for:
- **Content annotations**: Dynamic text, images, states
- **Interaction annotations**: User interaction behavior, state changes

## Development Commands

- `npm run app:dev` - Development server (localhost:8000)
- `npm run storybook` - Storybook (localhost:6006) 
- `npm run script:tokens` - Sync design tokens from Figma
- `npm run script:icons` - Sync icons from Figma

## Quality Checklist

Before submitting any implementation:

- ✅ Uses only existing SDS components
- ✅ Implements responsive design with `useMediaQuery`
- ✅ Uses CSS variables for all styling values
- ✅ Follows SDS import patterns and aliases
- ✅ Includes proper TypeScript interfaces
- ✅ Handles loading, error, and empty states
- ✅ Implements accessibility features
- ✅ Creates comprehensive Storybook stories
- ✅ Uses realistic data (not Lorem ipsum)
- ✅ Follows semantic HTML structure
- ✅ Includes proper error handling

## Commit Message Format

- **Component creation**: "Add ComponentName primitive component"
- **Implementation**: "Add DesignName page implementation" 
- **Stories**: "Add stories for ComponentName"
- **Figma integration**: "Add Figma Code Connect for ComponentName"

Remember: The goal is to create production-ready, accessible, and maintainable implementations that showcase the power and flexibility of the SDS design system.
